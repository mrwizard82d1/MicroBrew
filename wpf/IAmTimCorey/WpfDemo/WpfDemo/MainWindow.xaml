<!-- Starting height and width only -->
<!-- Set default font size and font family. Used only if not specified later-->
<Window x:Class="WpfDemo.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfDemo"
        mc:Ignorable="d"
        Title="Our WPF Demo"
        FontSize="18" 
        FontFamily="Segoe UI Light"
        Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <!-- Tim Corey's practice is to "surround" the grid with two boundary rows and two boundary columns. -->
            <!-- The boundary columns have a width of 20px; similarly, the boundary rows also have a height of 20px. -->
            <!-- Notice that one need not specify the units (unlike `WinForms`). -->
            <!-- Columns with `Auto` width grow and shrink to fit content. -->
            <!-- The column with a width of `*` consumes all "remaining" horizontal space. -->
            <!-- One can specify *multiple* `*` columns. The layout manager will then divide the remaining space -->
            <!-- equally to each column with an all consuming, `*`, width. -->
            <ColumnDefinition Width="20" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <!-- Again, Tim Corey's practice is to add a few more rows than columns -->
            <!-- A horizontal layout may be more useful allowing one to see both the designed UI and many rows -->
            <!-- of XAML -->
            <RowDefinition Height="20" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
        </Grid.RowDefinitions>
        <!-- Tim Corey's practice is to *never* put anything in grid 0, row 0, grid last or row last. -->
        <TextBlock Grid.Column="1"
                   Grid.Row="1"
                   Grid.ColumnSpan="3"
                   FontSize="36"
                   Text="WPF Super Demo" 
                   Margin="21,13,8,5"/>
        <TextBlock Grid.Column="1"
                   Grid.Row="2"
                   FontFamily="Segoe UI"
                   Text="First Name" />
        <TextBox Grid.Column="2"
                 Grid.Row="2"
                 x:Name="FirstNameText" 
                 Width="150"/>
        <!-- A `Button` supports both a `Content` property (for "simple" content?) -->
        <!-- But one can also specify child controls; for example, some text and an image, as the child of the -->
        <!-- button. This nesting is part of what gives WPF its flexibility. -->
        <!-- A `Button` takes up all available space. Setting it to span two columns "stretches" the button. -->
        <!-- Without specifying `Margin`, the button abuts against the row above. Specifying a `Margin` of 10 -->
        <!-- shrinks the button itself, but provides a separation between the rows both above and below... -->
        <!-- ...and, similarly, separates it from the left and right "cells" by 10 pixels. -->
        <!-- FYI. Currently, clicking the button will do **nothing** other than the default click behavior. -->
        <!-- By naming the button, `SubmitButton`, Rider/Visual Studio will provide a more meaningful name. -->
        <!-- Specifically, it offers to name the callback, `SubmitButton_OnClick`. If we had **not** named -->
        <!-- the button, the default offered name would have been something like `Button_OnClick.` One could -->
        <!-- probably use this default name, but `SubmitButton_OnClick` communicates a bit more about intent. -->
        <Button x:Name="SubmitButton" 
                Grid.Column="1"
                Grid.Row="3"
                Grid.ColumnSpan="2"
                Margin="10"
                Content="Run Me" 
                Click="SubmitButton_OnClick"/>
    </Grid>
</Window>